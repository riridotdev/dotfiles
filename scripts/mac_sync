#!/usr/bin/env bash

set -e

if ! command -v brew &>/dev/null; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

if ! grep /opt/homebrew/bin /etc/paths &>/dev/null; then
    sudo bash -c "echo /opt/homebrew/bin >> /etc/paths"
fi
if ! grep /opt/homebrew/sbin /etc/paths &>/dev/null; then
    sudo bash -c "echo /opt/homebrew/sbin >> /etc/paths"
fi

core_packages=(
    # Language Compilers and Runtimes
    "go"
    "lua"
    "node"

    # Language Servers and Tools
    "gopls"
    "lua-language-server"
    "shellcheck"
    "shfmt"
    "typescript-language-server"
    
    # Debuggers and Analysis
    "delve"
    "gperftools"
    
    # Shell and Terminal
    "--cask kitty"
    "fish"
    "fisher"
    "starship"

    # Editors
    "neovim"

    # CLI Tools
    "ansible"
    "bat"
    "cloc"
    "eza"
    "fd"
    "fzf"
    "git-delta"
    "htop"
    "httpie"
    "jq"
    "lsof"
    "mas"
    "pwgen"
    "ripgrep"
    "tree"
    "zoxide"

    # Networking
    "doggo"
    "mtr"
    "nmap"
    "--cask wireshark"

    # Virtualisation
    "docker"
    "libvirt"

    # Graphical
    "--cask nikitabobko/tap/aerospace"

    # Fonts
    "--cask font-hack-nerd-font"

    # Third Party
    "--cask alfred"
    "awscli"
    "gh"
    "--cask google-chrome"
    "--cask slack"
    "--cask spotify"
)

home_packages=(
    "--cask discord"
)

work_packages=(

)

IFS=$'\n'
for core_package in ${core_packages[@]}; do
    if echo "${core_package}" | grep '\-\-cask' &>/dev/null; then
        core_package="$(echo "${core_package}" | cut -d' ' -f2)"
        if ! brew list --casks | grep "${core_package##*\/}" &>/dev/null; then
            brew install --cask ${core_package}
        fi
    else
        if ! brew list --formulae | grep "${core_package}" &>/dev/null; then
            brew install ${core_package}
        fi
    fi
done
unset IFS

appstore_applications=(
    "918858936" # Airmail
    "1091189122" # Bear
    "975937182" # Fantastical
)

if ! grep /opt/homebrew/bin/fish /etc/shells &>/dev/null; then
    sudo bash -c "echo /opt/homebrew/bin/fish >> /etc/shells"
fi

if [ "${SHELL}" != "/opt/homebrew/bin/fish" ]; then
    chsh -s /opt/homebrew/bin/fish 2>/dev/null
fi

default_dirs=(
    "$HOME/dev/temp"
    "$HOME/dev/riridotdev"
)

for dir in ${default_dirs[@]}; do
    if [ ! -d "${dir}" ]; then
        mkdir -p "${dir}"
    fi
done

if [ ! -d "$HOME/dev/riridotdev/dotfiles" ]; then
    git clone "https://github.com/riridotdev/dotfiles" "$HOME/dev/riridotdev/dotfiles"
fi

required_symlinks=(
    "bat:~/.config/bat"
    "clangd/.clang-format:~/.clang-format"
    "fish/config.fish:~/.config/fish/config.fish"
    "fish/fish_variables:~/.config/fish/fish_variables"
    "git/.gitconfig:~/.gitconfig"
    "git/.gitignore:~/.gitignore"
    "kitty:~/.config/kitty"
    "libvirt:~/.config/libvirt"
    "nvim:~/.config/nvim"
    "nvim-lualine/riri.lua:~/.local/share/nvim/lazy/lualine.nvim/lua/lualine/themes/riri.lua"
    "scripts:~/scripts"
    "starship/starship.toml:~/.config/starship.toml"
)

pushd ~/dev/riridotdev/dotfiles &>/dev/null
for required_symlink in ${required_symlinks[@]}; do
    required_symlink_src="$(echo ${required_symlink} | cut -d':' -f1)"
    required_symlink_src="$HOME/dev/riridotdev/dotfiles/${required_symlink_src}"

    required_symlink_dst="$(echo ${required_symlink} | cut -d':' -f2)"
    required_symlink_dst="${required_symlink_dst/\~/$HOME}"

    if ! ([ -e "${required_symlink_dst}" ] || [ -L "${required_symlink_dst}" ]); then
        required_symlink_dst_dir="$(dirname "${required_symlink_dst}")"

        if ! [ -e "${required_symlink_dst_dir}" ]; then
            mkdir -p "${required_symlink_dst_dir}"
        fi

        if ! [ -d "${required_symlink_dst_dir}" ]; then
            echo "Failed to create symlink: ${required_symlink_dst_dir} is not a directory"
            continue
        fi

        ln -sn "${required_symlink_src}" "${required_symlink_dst}"

        echo "Added symlink ${required_symlink_dst} -> ${required_symlink_src}"
        continue
    fi

    if [ ! -L "${required_symlink_dst}" ]; then
        echo "Failed to create symlink: conflicting file at ${required_symlink_dst}"
        continue
    fi

    if [ ! "$(readlink "${required_symlink_dst}")" = "${required_symlink_src}" ]; then
        echo "Failed to create symlink: conflicting link at ${required_symlink_dst} -> ${required_symlink_src}"
        continue
    fi
done
popd &>/dev/null

if ! fish -c "fisher list | grep -w jorgebucaran/autopair.fish" &>/dev/null; then
    fish -c "fisher install jorgebucaran/autopair.fish"
fi
